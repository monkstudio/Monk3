<?phpnamespace Monk;$GLOBALS['router'] = null;/** *  */class Router{        private function __clone() {} // Disallow cloning	/** Route properties **/        private $templates     = []; // The hierachy of templates to search for.        public  $template       = '';   // The name of the requested template file. e.g. 'page' for 'page.php' etc.        public  $template_parts = [];   // The parts of the template name as an array. e.g. 'page-home.php' will container ['page', 'home'].                                        // Note the array will always contain two values, the second being NULL if no slug is used.        public  $template_slug  = null; // The slug of the requested template. For example: 'contact' if the template was 'page-contact.php'        public  $template_path  = '';   // Stores the full path to the original requested template        public  $template_base  = '';   // Base template to load. Defaults to 'base.php'        static public $router = false;                private function __construct($path) {            $this->template_path    = $path;            $this->template         = basename($this->template_path, '.php');            $this->template_parts   = array_reverse(explode('-', $this->template, 2) + [null, null]);            $this->template_slug    = end($this->template_parts);                        $this->prepare_templates(apply_filters('monk/router/base', 'base.php'));        }        	static function init($path = null){            if(                    !empty($path)                &&  is_string($path)                &&  !self::$router                &&  $self = __CLASS__                                )                return self::$router = new $self($path);            else return $path;	}        	function prepare_templates($tmpl = 'base.php'){		//$this->template_base = basename($tmpl, '.php');		$this->templates = [$tmpl];		if ($this->template !== 'index')                     array_unshift($this->templates, sprintf(substr($tmpl, 0, -4) . '-%s.php', $this->template));                                $this->templates = apply_filters("monk/router/templates", $this->templates);	}        	function __toString() {            global $router;            $base = locate_template($this->templates, false, true);            $this->template_base = basename($base, '.php');                        $router = $this;                        return $base;	}}