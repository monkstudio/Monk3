<?phpnamespace Monk\Shortcodes;use Monk\Utils;define ('MONK_SHORTCODES', true);/** * GRID SHORTCODE *   */class Grid {    static $cols	= 12;    static $current	= 0;    static $in_grid	= false;    static $grid	= array();    static $atts	= '';    static function grid($atts, $content){        // Prepare tag attributes        $atts['class'] = str_replace('row', '', @$atts['class']) . ' row';        $attrs = '';        foreach($atts as $k => $v)            $attrs .= $k . '="' . trim($v) . '" ';        // Reset grid properties        self::$atts     = trim($attrs);        self::$grid	= array();        self::$in_grid	= true;        self::$current	= self::$cols;        // Trigger shortcodes        $content_no_grid = do_shortcode($content);        // Check if columns were generated, if so then the columns will be joined together to form the grid content...        if(!empty(self::$grid)){            $return = "<div $attrs >" . implode('', self::$grid) . "</div>";        // ...Otherswise returned the original parsed content        }else{            $return = "<div $attrs ><div class='col-xs-12' >$content_no_grid</div></div>";        }        self::$in_grid = false;        return $return;    }    static function col($atts, $content, $column){        static $id = 0;        $id++;        $_class = [];        $col = (int)substr($column, strpos( $column, '-')+1);        if( is_integer( $col ) and $col > 0 ){            extract(shortcode_atts([                'class' => '',                'screen'=> 'sm'            ], $atts));            $_class[] = "col-$screen-$col";            $options = shortcode_atts([                'push'      => null,                'pull'      => null,                'offset'    => null            ], $atts);            foreach($options as $key => $value)                if(!empty($value) and is_numeric($value))                    $_class[] = "col-$screen-$key-$value";            $class = array_unique(array_merge($_class, explode(' ', $class)));            $content = "<div id='column-$id' class='"                     . trim(implode(' ', $class)) . "' >"                     . trim(do_shortcode($content))                     . "</div>";            if(self::$in_grid){                if(self::$current < (self::$current -= $col)){                    self::$grid[] = "</div><div " . self::$atts . " ><hr class='section visible-xs-block' />";                    self::$current = self::$cols - $col;                }                self::$grid[] = $content;            }else                return "<div class='row' >$content</div>";        }else            return $content;    }}Grid::$cols = apply_filters('monk/shortcode/grid/columns', 12);add_shortcode('grid', __NAMESPACE__ . '\\Grid::grid');for($c = 1; $c <= Grid::$cols; $c++)    add_shortcode('col-'.$c, __NAMESPACE__ . '\\Grid::col');/** * Email encode *  * @param array		$atts * @param string	$content * @return string */function email($atts, $content){    return Utils\email_encode($content);}add_shortcode('email', __NAMESPACE__ . '\\email');/** *  * @param array     $atts * @param string    $content * @return string */function button($atts, $content){        // Uses default Bootstrap button styles        $styles = apply_filters('ep/button/styles', ['default', 'primary', 'success', 'info', 'warning', 'danger', 'link']);	extract(shortcode_atts(array(		'style' => 'primary'	), $atts));	$style = (in_array($style, $styles)) ? $style : reset($styles);	$a = trim( strip_tags(  do_shortcode( $content ), '<a>' ) );	return "<span class='btn $style' >$a</span>";}add_shortcode('button', __NAMESPACE__ . '\\button');/** *  * @param array		$atts * @param string	$content * @return string */function highlight($atts, $content){    return '<span class="highlight" >' . trim($content) . '</span>';}add_shortcode('highlight', __NAMESPACE__ . '\\highlight');/* *  * HOOK Shortcode */class Hooks {    private static $hooks = [];    static function load(){        $page = \epFramework::need('page');        self::$hooks = apply_filters( 'monk/page_hooks', get_post_meta($page->current('id'), '_monk_hooks', true));    }    static function get($key = false){        if(empty(self::$hooks))            self::load ( );        if($key === false)            return self::$hooks;        elseif(isset(self::$hooks[$key]))            return self::$hooks[$key];        return false;    }    static function add($key, $hook = array()){        self::$hooks[$key] = (array)$hook;        $page = \epFramework::get('page');        update_post_meta ( $page->current('id'), '_monk_hooks', self::$hooks);    }}if(get_theme_support('monk-page-hooks')) :function hook($atts, $content){	static $key = 0;        	$return = null;        $hooks = Hooks::get();	if(isset($ep_module_page) and $ep_module_page->is_saving()){            extract(shortcode_atts(array(                    'ref'	=> wp_strip_all_tags( $content, true ),                    'id'	=> false            ), $atts));            $id = esc_attr( preg_replace( '/\W+/', '-', strtolower( $id ?: $ref ) ) );            foreach($hooks as $hook){                if($id === $hook['id']){                    $id = $id . '-' . $key;                    break;                }            }            if($id and $ref){                Hooks::add($key, [                    'ref'	=> $ref,                    'id'	=> $id                ]);            }	}elseif( !empty ( $hooks ) ){            extract(Hooks::get($key));            $return = "<hr class='article-hook' id='{$id}' />" . $content;	}	$key++;	return $return;	}add_shortcode('hook', __NAMESPACE__ . '\\hook');endif;/** *  * BANNER SHORTCODE */function banner($atts, $content){    $classes = ['banner'];    extract(shortcode_atts([        'style' => null    ], $atts));    if($style)        array_push ($classes, sprintf ('banner-%s', $style));    $classes = implode(' ', (array)apply_filters('ep/banner/styles', $classes));    return sprintf('<div class="%s" >%s</div>', $classes, do_shortcode($content));}add_shortcode('banner', __NAMESPACE__ . '\\banner');/** *  * Icons Shortcode */function icon ($atts){    extract(shortcode_atts([        'name'  => apply_filters('ep/icon/default', 'right-open'),        'size'  => apply_filters('ep/icon/size', 'x1'),        'prefix'=> apply_filters('ep/icon/prefix', 'icon-')    ], $atts));    $icon = $prefix . $name;    $size = $prefix . $size;    return "<i class='$icon $size' ></i>";    }add_shortcode('icon', __NAMESPACE__ . '\\icon');/** * Quote shortcode */function quote($atts, $content = ''){    extract(shortcode_atts([        'cite'  => ''    ], $atts));    if(strlen($cite) > 0)        $cite = sprintf ("<footer><cite title='%s' >%s</cite></footer>", esc_attr ($cite), $cite);    if(strlen($content) > 0)        $content = sprintf("<blockquote>%s%s</blockquote", wpautop($content, false), $cite);    return $content;}add_shortcode('quote', __NAMESPACE__ . '\\quote');/** *  * Modern Tribes The Events Calendar Shortcode intergration */function events($atts){    $return = '';    // Read more button    $viewAll = home_url(\Tribe__Events__Main::getOption('eventsSlug') . '/');    $viewAll_label = __('View all', MONK_LANG);    $viewAll_label_esc = esc_attr($viewAll_label);    extract(shortcode_atts([        'view'  => 'upcoming',        'limit' => tribe_get_option( 'postsPerPage', 10 )    ], $atts));    $presets = [        'upcoming'  => [            'order_by'  => ['event_date', 'menu_order'],            'order'     => 'ASC'        ],        'newest'    => [            'order_by'  => ['date', 'menu_order'],            'order'     => 'DESC'        ],        'featured'  => [            'order_by'  => ['??', 'event_date'],            'order'     => 'ASC'        ]    ];    if($view){        $args = $presets[$view]                 + [                    'eventDisplay'      => 'custom',                    'posts_per_page'    => $limit,                    'start_date'        => date_i18n( \Tribe__Events__Date_Utils::DBDATETIMEFORMAT )                ];        $events = \Tribe__Events__Query::getEvents($args, false);        if(!empty($events)){            ob_start();                        echo "<div class='tribe-events-loop vcalendar events' >";            foreach ($events as $event){                setup_postdata($GLOBALS['post'] = &$event);                tribe_get_template_part('list/single', 'event');            }            echo "<a href='$viewAll' title='$viewAll_label_esc' class='readmore' >$viewAll_label&nbsp;<i class='icon-angle-down' ></i></a>"                . "</div>";            wp_reset_postdata();            $return = ob_get_contents();            ob_end_clean();                 }    }    return $return;    }add_shortcode('events', __NAMESPACE__ . '\\events');/** * @todo Document me. */function map($atts, $content = null){    $return = '';    if(current_theme_supports('monk-google-maps')) {        extract(shortcode_atts([            'field' => 'map',            'id'    => null        ], $atts));        $return = \Monk\get_map($field, $id, $content) ?: '';    }    return $return;}add_shortcode('map', __NAMESPACE__ . '\\map');// Shortcodesadd_shortcode('slider', 'Monk\Slider');