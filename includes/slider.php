<?phpnamespace Monk;class Slider {    // Configure module behaviours    public  $post           = null;    public  $slides         = [];    private $attachments    = null; // Internal attachment cache.    public  $image_sizes    = [];    public  $breakpoints    = [];    public function __construct() {        $this->image_sizes = apply_filters('monk\slider\image_sizes', array(            'slider_tablet' => [768, 0, false],            'slider_desktop' => [1600, 0, false],            'slider_mobile' => [480, 0, false]        ));                        uasort($this->image_sizes, function ($a, $b) {                     if ($a[0] == $b[0]) {                return 0;            }            return ($a[0] < $b[0]) ? -1 : 1;                    });        $prev_size = null;        foreach ($this->image_sizes as $ref => $size) {            if ($prev_size === null)                $this->breakpoints[$ref] = false;            else {                $bp = $prev_size + 1;                $this->breakpoints[$ref] = "(min-width:{$bp}px)";            }            $prev_size = max($size);        }                $this->breakpoints = apply_filters('monk\slider\breakpoints',  $this->breakpoints);        foreach ($this->image_sizes as $ref => $size)            call_user_func_array('add_image_size', array_merge([$ref], $size));                $this->positionOffset = apply_filters('monk\slider\offset', 50);    }            public function setup($selector = null, $post_id = false){                $this->post = get_post();                        if(is_string($selector) && !is_numeric($selector) && function_exists('get_field'))            $this->slides = get_field ($selector, $post_id, false);                elseif(is_array($selector))            $this->slides = $selector;                else            $this->slides = [ get_post($selector) ];                        $this->slides = apply_filters('monk\slider\slides', $this->slides ?: []);                reset($this->slides); // Ensure internal pointer is set to beginning of array.                                if(empty($this->slides))            return false;                else            return true;    }            public function have_slides(){        empty($this->slides)            && $this->setup();        if(current($this->slides) === false){            return $this->the_slide();        }else            return true;    }        public function get_slide($index = null){                $post = null;                empty($this->slides)            && $this->setup();                if($index === null)            $post = current($this->slides);                else switch ($index) {                        case 'first' : // @todo            case 'last' : // @todo            default :                                 if(is_integer($index) && isset($this->slides[$index]))                    $post = $this->slides[$index];                                                    break;                    }                if($post !== null)            $post = get_post($post);                return $post;            }            public function the_slide(){                $slide = current($this->slides);                        if($slide !== false){                        $slide = get_post($slide);                        setup_postdata($GLOBALS['post'] = &$slide);            next($this->slides);            return $slide;        }else{                        if($this->post)                setup_postdata($GLOBALS['post'] =& $this->post);            else                wp_reset_postdata();            $this->setup($this->slides);                                    return false;        }		    }            public function get_the_attachment($post = null) {                if($css = $this->ready_slide($post))                return $css['attachment'];                return false;            }            public function get_the_selector($post = null){        if($css = $this->ready_slide($post)){                        return $css['selector'];                        }                return false;            }        public function get_the_css($post = null, $options = []) {                if($css = $this->ready_slide($post, $options)){                        return $css['css'];                    }                return false;            }            public function ready_slide($post = null, $options = []){                $post   = get_post($post);                      if($post !== null){                        $id = $post->post_type === 'attachment' ? get_the_ID() : get_post_thumbnail_id($post);                                                if(                    !empty($id)                &&  !isset($this->attachments[$id])                &&  $css = $this->make_css($id, $options)            )                                   $this->attachments[$id] = $css;            return $this->attachments[$id];                                }                return false;            }                public function make_css($attachment, $options = []) { // Working title                static $instance    = 0;        static $cache       = [];                $attachment = get_post($attachment);                if($attachment !== null){            $id = $attachment->ID;            if (key_exists($id, $cache))                return $cache[$id];            elseif (wp_attachment_is_image($attachment)) {                $instance++;                $options = wp_parse_args($options, [                    'offsetX' => 50,                    'offsetY' => 50,                    'selector' => null,                    'container' => null                ]);                $selector   = $options['selector'] ?: "_slide$id-$instance" ;                $css        = '<style>';                $offsetX    = apply_filters('monk\slider\offset_x', $options['offsetX'], $attachment);                $offsetY    = apply_filters('monk\slider\offset_y', $options['offsetY'], $attachment);                $has_container = !empty($options['container']) && is_string($options['container']) ? true : false;                if ($has_container)                    $css = "<{$options['container']} id='$selector' class='slider-css' style='display: none; position: absolute; height: 0; width: 0; left: -100%' >$css";                foreach ($this->breakpoints as $ref => $bp)                    if ($url = wp_get_attachment_image_src($id, $ref)) {                        $bp_before = ($bp !== false) ? "@media $bp {" : "";                        $bp_after = ($bp !== false) ? "}" : "";                        $rule = sprintf("%s.%s{background-image: url('%s');background-position: %d%% %d%% }%s", $bp_before, $selector, reset($url), $offsetX, $offsetY, $bp_after);                        $css .= apply_filters('monk\slider\css_rule', $rule, $ref, $attachment);                                            }                $css .= "</style>" . ($has_container ? "</{$options['container']}>" : "");                return $cache[$id] = [                    'attachment'    => $attachment,                    'selector'      => $selector,                    'css'           => apply_filters('monk\slider\css', $css, $attachment)                ];            }            }        return false;    }}$GLOBALS['slider'] = new Slider();