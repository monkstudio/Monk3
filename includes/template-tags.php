<?php//namespace Monk;use Monk\Utils;/** * @todo  */function get_partial($partial, $name = null, $data = [], $section = false){        if(class_exists('Monk\Partial')){        $partial = new Monk\Partial($partial, $name, $data);        return $partial($section);            }        return null;    }/** * This function essentially loads in another wordpress template within the exisitng on by recalling WP's template loader. *  * @param string|array $query The query parameters that will be passed onto the wp query object. * @return array Resulting list of posts from the WP Query. */function query_template($query = null){    global $wp_query, $post;        // Ensure that there are no hooks that might cause a redirect    remove_all_actions('template_redirect');        $_query = [];    if(is_single()){                $_query['post_type']        = get_post_type();        $_query['post__not_in']     = [get_the_ID()];        $_query['posts_per_page']   = get_option('posts_per_page');              }        if(is_paged())        $_query['paged']            = get_query_var('page');            $query = wp_parse_args($query, $_query);        $_query['template_query']       = true;        $wp_query = new WP_Query();        $wp_query->is_template_query    = true;        $posts = $wp_query->query($query) ?: [$post];        $post = reset($posts);        include ABSPATH . WPINC . '/template-loader.php';        wp_reset_query();        return $posts;}function is_template_query(){    global $wp_query;    if ( ! isset( $wp_query ) )         _doing_it_wrong( __FUNCTION__, __( 'Conditional query tags do not work before the query is run. Before then, they always return false.' ), '3.1.0' );    if(isset($wp_query->is_template_query))        return (bool)$wp_query->is_template_query;        return false;    }/** *    * @param type $selector * @param type $post_id * @param type $options * @return boolean|string */function get_map($selector = 'map', $post = null, $options = []){        static $instance = 0;    $post = get_post($post);        if($post && function_exists('acf')){                $instance++;                wp_enqueue_script('googlemaps');        $map    = $selector ? apply_filters('monk\map', get_field($selector, $post->ID) ?: [], $post) : [];                        empty($options) || is_string($options)            &&  $options = [                    'styles' => $options                ];        $options = wp_parse_args($options, [            'id'            => $instance,            'markers'       => [                                $map + [                                    'icon'          => apply_filters('monk\map\icon', get_field("{$selector}_icon", $post->ID) ?: get_field("{$selector}_icon", 'option'), $post),                                    'infowindow'    => apply_filters('monk\map\infowindow', get_field("{$selector}_infowindow", $post->ID), $post),                                ]                            ],            'icon'          => null,            'styles'        => apply_filters('monk\map\styles', wp_strip_all_tags(get_field("{$selector}_styles", 'option'), true))        ]);                                if(count($options['markers']) === 1)            $options['markers'][0]['center'] = true;        if(is_array($map) and !empty($map))            return sprintf("<div class='embed-responsive $selector-wrapper' ><div id='$selector-$instance' class='embed-responsive-item $selector' data-map='%s' ></div></div>", json_encode($options));    }    return false;}/** *  * @param type $selector * @param type $post_id * @param type $options * @return boolean */function the_map($selector = 'map', $post = null, $options = []){    $map = get_map($selector, $post, $options);    if($map !== false){        echo $map;        return true;    }    return false;}/** * API Wrapper functions for the Monk\Router object. Inspired to Sage's wrapper class. * * @link https://roots.io/sage/docs/theme-wrapper/ * @link http://scribu.net/wordpress/theme-wrappers.html */function get_the_template(){    global $router;            if($router)        return $router->template;    return basename(get_page_template(), '.php');}function get_template_parts(){    global $router;        if($router)        return $router->template_parts;    return [];}function get_template_path(){    global $router;        if($router)        return $router->template_path;    return get_page_template();}/** * @todo Is this function really needed in lieu of get_template_parts? *  * @return type */function get_template_slug(){    global $router;        $slug = null;        if($router)        $slug = $router->template_slug;    return $slug;}function get_template_base(){    global $router;        if($router)        return $router->template_base;    return null;}/** * API Wrapper functions for the Monk\Slider object */function setup_slides($slides = null, $post_id = false){    global $slider;    if(isset($slider))        return $slider->setup($slides, $post_id);        else        return false;    }function get_slide($index = null){    global $slider;        if($slider)        return $slider->get_slide($index);        return null;    }function the_slide_image($size = null, $attr = '', $echo = true){        $attachment = get_slide_attachment_image();    $img        = '';        if($attachment !== false)        $img = wp_get_attachment_image ($attachment->ID, $size ?: 'full-width', false, $attr);        if($echo)        echo $img;        return $img;        }function get_slide_attachment_image($post = null){   global $slider;      if($slider)       return $slider->get_the_attachment($post);      else return false;    }function have_slides($autoload = false){    global $slider;        if($slider and $slider->have_slides()){                if($autoload)            return $slider->the_slide();                else return true;            }        return false;    }function the_slide(){    global $slider;        if($slider)        return $slider->the_slide();            return false;    }function the_slide_css($before = '', $after = '', $echo = true){        $css = get_the_slide_css();        if($css !== false)        $css = trim(implode(' ', (array)apply_filters('monk\the_slide_css', [            'before'    => $before,             'css'       => $css,             'after'     => $after        ])));            else        $css = '';        if($echo)        echo $css;            return $css;      }function get_the_slide_css($post = 0){    global $slider;        return $slider->get_the_css($post);    }function the_slide_selector($before = '', $after = '', $echo = true){        $selector = get_the_slide_selector();        if($selector !== false)                $classes = trim(implode(' ', apply_filters('monk\the_slide_attachment', [            'before'        => $before,             'attachment'    => $selector,            'after'         => $after        ])));               else        $selector = '';        if($echo)        echo $selector;    return $selector;      }function get_the_slide_selector($post = 0){    global $slider;            return $slider->get_the_selector($post);    }